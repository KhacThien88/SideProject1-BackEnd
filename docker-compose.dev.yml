version: '3.8'

services:
  # Backend API with development settings
  backend-dev:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - ENVIRONMENT=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_REGION=us-east-1
    volumes:
      - .:/app
      - /app/__pycache__
    depends_on:
      - redis
      - dynamodb-local
    restart: unless-stopped
    networks:
      - app-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # DynamoDB Local for development
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8001:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    restart: unless-stopped
    networks:
      - app-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  # DynamoDB Admin for DynamoDB management
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    ports:
      - "8082:8001"
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb-local:8000
    depends_on:
      - dynamodb-local
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis_data:
  dynamodb_data:

networks:
  app-network:
    driver: bridge
